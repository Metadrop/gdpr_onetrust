<?php

/**
 * @file
 * This module intends to enable/disable the cookies based on the user consent.
 */

define('JS_COOKIE_BLOCKING_PERFORMANCE', '2');
define('JS_COOKIE_BLOCKING_FUNCTIONAL', '3');
define('JS_COOKIE_BLOCKING_TARGETTING', '4');
define('JS_COOKIE_BLOCKING_MEDIA', '8');

/**
 * Implements hook_help().
 */
function js_cookie_blocking_help($path, $arg) {
  switch ($path) {
    case 'admin/help#js_cookie_blocking':

      $filepath = dirname(__FILE__) . '/README.md';
      if (file_exists($filepath)) {
        $readme = file_get_contents($filepath);
      }
      else {
        $filepath = dirname(__FILE__) . '/README.txt';
        if (file_exists($filepath)) {
          $readme = file_get_contents($filepath);
        }
      }
      if (!isset($readme)) {
        return NULL;
      }
      if (module_exists('markdown')) {
        $filters = module_invoke('markdown', 'filter_info');
        $info = $filters['filter_markdown'];

        if (function_exists($info['process callback'])) {
          $output = $info['process callback']($readme, NULL);
        }
        else {
          $output = '<pre>' . $readme . '</pre>';
        }
      }
      else {
        $output = '<pre>' . $readme . '</pre>';
      }

      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function js_cookie_blocking_menu() {
  $items['admin/config/system/gdpr-onetrust/config'] = array(
    'title' => 'Configurations',
    'description' => 'Configure the external javascript with their cookie category',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('js_cookie_blocking_admin_form'),
    'access arguments' => array('administer GDPR One Trust configurations'),
    'file' => 'js_cookie_blocking.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -4,
  );
  $items['gdpr/cookie_blocking'] = array(
    'page callback' => 'js_cookie_blockingconfigure_cookies',
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Setup on cookie to identify the active status for categories.
 */
function js_cookie_blockingconfigure_cookies() {
  if (isset($_POST['gdpr_c'])) {
    if ($_SESSION['gdpr_ot_category'] !== trim($_POST['gdpr_c'])) {
      $_SESSION['gdpr_ot_category'] = trim($_POST['gdpr_c']);
    }
  }
}

/**
 * Check if gdpr category cookies are set.
 */
function js_cookie_blocking_cookiecategory_check($cookie_name) {
  $gdpr_cookie_category = explode(",", $_SESSION['gdpr_ot_category']);
  if (!in_array($cookie_name, $gdpr_cookie_category)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_init().
 */
function js_cookie_blocking_init() {
  $obj = GdprBlockjs::instance();
  if ($obj->isGdprScope() === TRUE) {
    global $base_root;
    drupal_add_js(drupal_get_path('module', 'js_cookie_blocking') . '/js_cookie_blocking.js', 'file');
    drupal_add_library('system', 'jquery.cookie');
    $base_domain = explode("://", $base_root);
    drupal_add_js(array('js_cookie_blocking' => array('base_domain' => $base_domain[1])), 'setting');
    $site_js = drupal_add_js();
    js_cookie_blocking_filter_cookiejs($site_js);
  }
}

/**
 * Modify the JS scope and update the config data to insertscript.
 */
function js_cookie_blocking_filter_cookiejs(&$site_js, $exclude_add = FALSE) {
  module_load_include('inc', 'js_cookie_blocking', 'cookie_js_list');
  $cookie_js_list = cookie_js_path();
  $obj = GdprBlockjs::instance();
  foreach ($cookie_js_list as $cookie_js_key => $cookie_js_array) {
    foreach ($cookie_js_array as $cookie_js) {
      if (isset($site_js[$cookie_js])) {
        js_cookie_blocking_gdpr_scopeing($site_js[$cookie_js], $cookie_js_key);

        if ($exclude_add === FALSE) {
          $obj->generateOptanons($site_js[$cookie_js]);
        }
      }
    }
  }
}

/**
 * Implements hook_html_head_alter().
 */
function js_cookie_blocking_html_head_alter(&$head_elements) {
  $obj = GdprBlockjs::instance();
  $obj->optanoPublishScript();
}

/**
 * Update the JS scope variable to access from OneTrust API.
 */
function js_cookie_blocking_gdpr_scopeing(&$js, $cookie_category) {
  $js['gdpr_onetrust']['group'] = $cookie_category;
  $js['gdpr_onetrust']['scope'] = $js['scope'];
  $js['scope'] = 'gdpr_onetrust';
}

/**
 * Implements hook_js_alter().
 */
function js_cookie_blocking_js_alter(&$js) {
  $obj = GdprBlockjs::instance();
  if ($obj->isGdprScope() === TRUE) {
    js_cookie_blocking_filter_cookiejs($js, TRUE);
    $blocking_js_files = variable_get('external_js_cookie', '');
    if ($blocking_js_files != '') {
      $block_js_array = explode(PHP_EOL, $blocking_js_files);
      foreach ($block_js_array as $value) {
        $block_sep = explode('|', $value);
        $js_file = trim($block_sep[0]);
        $cookie_category = trim($block_sep[1]);
        if (isset($js[$js_file])) {
          $obj->optanonInsertscript($js_file, $cookie_category, 'head', TRUE);
          js_cookie_blocking_gdpr_scopeing($js[$js_file], $cookie_category);
        }
      }
    }

    if (module_exists('googleanalytics')) {
      foreach ($js as $key => $val) {
        if (!is_array($val['data']) && preg_match("/GoogleAnalyticsObject/", $val['data']) && (preg_match("/function OptanonWrapper/", $val['data'], $matches) == 0)) {
          // Change the scope of the inline GA code.
          js_cookie_blocking_gdpr_scopeing($js[$key], JS_COOKIE_BLOCKING_PERFORMANCE);

          // Create the GA js file on the fly to update the inline JS for GA.
          $ga_file_path = variable_get('file_public_path') . '/ga.js';
          $filepath = DRUPAL_ROOT . '/' . $ga_file_path;
          js_cookie_blocking_create_gajs($filepath, $js[$key]['data']);

          // Attach the GA file to the OneTrust API.
          $gajs[$ga_file_path]['data'] = $ga_file_path;
          $gajs[$ga_file_path]['gdpr_onetrust']['group'] = JS_COOKIE_BLOCKING_PERFORMANCE;
          $obj->generateOptanons($gajs[$ga_file_path]);
        }
      }
    }
  }
}

/**
 * Verify the file permissions and create/update the file.
 */
function js_cookie_blocking_create_gajs($filepath, $data) {
  if (file_exists($filepath) && !is_writable($filepath)) {
    chmod($filepath, 0777);
  }

  if (!file_exists($filepath) || filesize($filepath) === 0) {
    $fp = fopen($filepath, 'w');
    fwrite($fp, $data);
    fclose($fp);
  }
}

/**
 * Remove iframe from page contents.
 */
function js_cookie_blocking_block_iframe(&$content) {
  $marker_list = array('youtube');
  if (preg_match_all('#(?ism:<iframe[^>]*)src=(".*?")(?ism:(?:.*<\/iframe>))#', $content, $matches) !== FALSE) {
    foreach ($marker_list as $marker) {
      foreach ($matches[0] as $key => $iframes) {
        if (strstr($iframes, $marker) !== FALSE) {
          $media_id = 'media_id_' . rand();
          $content = str_replace($iframes, '<div id="' . $media_id . '"></div>', $content);
          $iframes = str_replace(array("\n", "\r"), '', $iframes);
          $gdpr->optanonInserthtml($iframes, $media_id, JS_COOKIE_BLOCKING_MEDIA);
        }
      }
    }
  }
  return $content;
}
